library(dplyr)
install.packages("foreign")
install.packages("foreign")
library(foreign)
library(dplyr)
library(ggplot2)
library(readx1)
install.packages("dplyr")
install.packages("rJava")
install.packages("rJava")
install.packages("KoNLP")
install.packages("KoNLP")
install.packages("KoNLP")
install.packages("rJava")
install.packages("memoise")
install.packages("KoNLP")
library(rJava)
library(memoise)
install.packages("KoNLP")
install.packages("KoNLP")
install.packages("KoNLP")
("KoNLP")
install.packages("KoNLP")
library(KoNLP)
library(KoNLP)
install.packages("KoNLP")
install.packages("KoNLP")
install.packages("KoNLP")
("rJava")
install.packages("rJava")
install.packages("memoise")
install.packages("rJava")
install.packages("memoise")
install.packages("KoNLP")
.libPaths()
(KoNLP)
library(KoNLP)
install.packages("KoNLP")
install.packages("https://cran.rproject.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source", upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
install.packages("rJava")
install.packages("memoise")
install.packages("https://cran.rproject.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source", upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(rJava)
library(memoise)
install.packages("https://cran.rproject.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source", upgrade = "never", INSTALL_opts=c("--no-multiarch"))
install.packages("KoNLP")
install.packages("multilinguer")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type ="binary")
install.packages("https://cran.rproject.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source",upgrade = "never", INSTALL_opts=c("--no-multiarch"))
install.packages("https://cran.rproject.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type ="source",upgrade = "never", INSTALL_opts=c("--no-multiarch"))
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type ="binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type ="binary")
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source", upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source", upgrade = "never", INSTALL_opts=c("--no-multiarch"))
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
library(dplyr)
Sys.setenv(JAVA_HOME="C:\Program Files\Java\jre1.8.0_261")
Sys.setenv(JAVA_HOME="C:\Program Files\Java\jre1.8.0_261")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_261/")
Sys.getenv(“JAVA_HOME”)
Sys.getenv(“JAVA_HOME”)
Sys.getenv("JAVA_HOME")
useNIADic()
useNIADic()
txt <- readLines("hiphop.txt")
head(txt)
install.packages("stringr")
install.packages("stringr")
library(stringr)
txt <- str_replace_all(txt, " \\W", " ")
extractNoun("대한민국의 영토는 한반도와 그 부속도서로 한다")
library(KoNLP)
library(KoNLP)
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source", upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source", upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
useNIADic()
useNIADic()
install.packages("rJava")
library(rJava)
library(memoise)
library(KoNLP)
useNIADic()
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_261/")
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source", upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
("backports")
install.packages("backports")
library(backports)
library(KoNLP)
extractNoun("대한민국의 영토는 한반도와 그 부속도서로 한다")
nouns <- extractNoun(txt)
wordcount <- table(unlist(nouns))
df_word<- as.data.frame(wordcount, stringsAsFactors =F)
df_word<- rename(df_word,
word = Var1,
freq = Freq)
library(dplyr)
df_word<- rename(df_word,
word = Var1,
freq = Freq)
install.packages("wordcloud")
library(wordcloud)
wordcloud(words = df_word$word, # 단어
freq = df_word$freq, # 빈도
min.freq = 2, # 최소 단어 빈도
max.words = 200, # 표현 단어 수
random.order = F, # 고빈도 단어 중앙 배치
rot.per = .1, # 회전 단어 비율
scale = c(4, 0.3), # 단어 크기 범위
colors = pal) # 색깔 목록
pal <- brewer.pal(8,"Dark2")
wordcloud(words = df_word$word, # 단어
freq = df_word$freq, # 빈도
min.freq = 2, # 최소 단어 빈도
max.words = 200, # 표현 단어 수
random.order = F, # 고빈도 단어 중앙 배치
rot.per = .1, # 회전 단어 비율
scale = c(4, 0.3), # 단어 크기 범위
colors = pal) # 색깔 목록
wordcloud(words = df_word$word, # 단어
freq = df_word$freq, # 빈도
min.freq = 2, # 최소 단어 빈도
max.words = 200, # 표현 단어 수
random.order = F, # 고빈도 단어 중앙 배치
rot.per = .1, # 회전 단어 비율
scale = c(4, 0.3),
colors = pal)
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
set.seed(1234) # 난수 고정
pal <- brewer.pal(9,"Blues")[5:9] # 색상 목록 생성
wordcloud(words = df_word$word, # 단어
freq = df_word$freq, # 빈도
min.freq = 2, # 최소 단어 빈도
max.words = 200, # 표현 단어 수
random.order = F, # 고빈도 단어 중앙 배치
rot.per = .1, # 회전 단어 비율
scale = c(4, 0.3), # 단어 크기 범위
colors = pal) # 색깔 목록
install.packages("ggiraphExtra")
library(ggiraphExtra)
str(USArrests)
head(USArrests)
library(tribble)
library(tibble)
crime <- rownames_to_column(USArrests, var = "state")
crime$state <- tolower(crime$state)
str(crime)
install.packages("maps")
library(maps)
map()
map(database = "world", region = "Japan")
korea <- c("South Korea", "North Korea")
map(database = "world", region = korea)
map(database = "world", region = korea, col = "#01B8AA")
map(database = "world", region = korea, col = "#1B8AA", bg="#374649", fill = TRUE)
map(database = "world", region = korea, col = "#01B8AA", bg="#374649", fill = TRUE)
states_map <- map_data("state")
str(states_map)
states_map <- map_data("state")
library(ggplot2)
states_map <- map_data("state")
str(states_map)
install.packages("mapproj")
library(mapproj)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map
interactive = T)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map,
interactive = T)
install.packages("stringi")
install.packages("stringi")
install.packages("devtools")
devtools::install_github("cardiomoon/Kormaps2014")
library(kormaps2014)
#데이터 준비하기
install.packages("foreign")
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
#데이터 불러오기
raw_welfare <- read.spss(file = "koweps_hpwc14_2019_beta1.sav",
to.data.frame = T)
welfare <- raw_welfare
#데이터 검토하기
head(welfare)
tail(welfare)
View(welfare)
dim(welfare)
str(welfare)
summary(welfare)
#변수명 바꾸기
sex = h14_g3, # 성별
marriage = h14_g10, # 혼인 상태
#변수명 바꾸기
welfare <- rename(welfare,
sex = h14_g3,
birth = h14_g4,
marriage = h14_g10,
religion = h14_g11,
income = p1402_8aq1,
code_job = h14_eco9,
code_region = h14_reg7)
#성별 변수 검토 및 전처리
class(welfare$sex)
table(welfare$sex)
table(welfare$sex)
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex)
table(is.na(welfare$sex))
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex == 1, "male", "female")
table(welfare$sex)
qplot(welfare$sex)
#월급 변수 검토 및 전처리
class(welfare$income)
summary(welfare$income)
qplot(welfare$income)
qplot(welfare$income) + xlim(0, 1000)
summary(welfare$income)
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
table(is.na(welfare$income))
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
sex_income
ggplot(data = sex_income, aes(x = sex, y = mean_income)) + geom_col()
class(welfare$birth)
summary(welfare$birth)
qplot(welfare$birth)
summary(welfare$birth)
table(is.na(welfare$birth))
welfare$birth <- ifelse(welfare$birth == 9999, NA, welfare$birth)
table(is.na(welfare$birth))
welfare$age <- 2015 - welfare$birth + 1
summary(welfare$age)
qplot(welfare$age)
age_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
head(age_income)
ggplot(data = age_income, aes(x = age, y = mean_income)) + geom_line()
#자유주제 직업별 성별월급차이
#직업 변수 검토 및 전처리
class(welfare$code_job)
table(welfare$code_job)
library(readxl)
list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
head(list_job)
dim(list_job)
welfare <- left_join(welfare, list_job, id = "code_job")
welfare %>%
filter(!is.na(code_job)) %>%
select(code_job, job) %>%
head(10)
job_income <- welfare %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income))
head(job_income)
top10 <- job_income %>%
arrange(desc(mean_income)) %>%
head(10)
top10
ggplot(data = top10, aes(x = reorder(job, mean_income), y = mean_income)) +
geom_col() +
coord_flip()
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(top10, sex) %>%
summarise(mean_income = mean(income))
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(job, sex) %>%
summarise(mean_income = mean(income))
ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex)) +
geom_col() +
list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex)) +
geom_col())
ggplot(data = top10, aes(x = reorder(job, mean_income), y = mean_income)) +
geom_col() +
coord_flip()
sex_job_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(job, sex) %>%
summarise(mean_income = mean(income))
top10 <- sex_job_income %>%
arrange(desc(mean_income)) %>%
head(10)
ggplot(data = top10, aes(x = reorder(job, mean_income), y = mean_income)) +
geom_col() +
coord_flip()
ggplot(data = top10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col() +
coord_flip()
ggplot(data = top10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col(position = "dodge") +
coord_flip()
bottom10 <- sex_job_income %>%
arrange(mean_income) %>%
head(10)
ggplot(data = bottom10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col(position = "dodge") +
coord_flip()
ggplot(data = bottom10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col() +
coord_flip()
top10 <- sex_job_income %>%
arrange(desc(mean_income)) %>%
head(10)
ggplot(data = top10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col() +
coord_flip()
bottom10 <- sex_job_income %>%
arrange(mean_income) %>%
head(10)
ggplot(data = bottom10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col() +
coord_flip()
ggplot(data = top10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col(position = "dodge") +
coord_flip()
ggplot(data = bottom10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col(position = "dodge") +
coord_flip()
#데이터 준비하기
install.packages("foreign")
library(foreign)
install.packages("foreign")
library(dplyr)
library(ggplot2)
library(readxl)
install.packages("foreign")
#데이터 불러오기
raw_welfare <- read.spss(file = "koweps_hpwc14_2019_beta1.sav",
to.data.frame = T)
welfare <- raw_welfare
#데이터 불러오기
raw_welfare <- read.spss(file = "koweps_hpwc14_2019_beta1.sav",
to.data.frame = T)
#데이터 준비하기
install.packages("foreign")
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
#데이터 불러오기
raw_welfare <- read.spss(file = "koweps_hpwc14_2019_beta1.sav",
to.data.frame = T)
welfare <- raw_welfare
#데이터 검토하기
head(welfare)
tail(welfare)
View(welfare)
dim(welfare)
str(welfare)
summary(welfare)
#변수명 바꾸기
welfare <- rename(welfare,
sex = h14_g3,
birth = h14_g4,
marriage = h14_g10,
religion = h14_g11,
income = p1402_8aq1,
code_job = h14_eco9,
code_region = h14_reg7)
#성별 변수 검토 및 전처리
class(welfare$sex)
table(welfare$sex)
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex)
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex == 1, "male", "female")
table(welfare$sex)
qplot(welfare$sex)
#월급 변수 검토 및 전처리
class(welfare$income)
summary(welfare$income)
qplot(welfare$income)
qplot(welfare$income) + xlim(0, 1000)
summary(welfare$income)
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
table(is.na(welfare$income))
#성별에 따른 월급 차이 분석하기
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
sex_income
ggplot(data = sex_income, aes(x = sex, y = mean_income)) + geom_col()
#나이 변수 검토 및 전처리
class(welfare$birth)
summary(welfare$birth)
qplot(welfare$birth)
summary(welfare$birth)
table(is.na(welfare$birth))
welfare$birth <- ifelse(welfare$birth == 9999, NA, welfare$birth)
table(is.na(welfare$birth))
welfare$age <- 2015 - welfare$birth + 1
summary(welfare$age)
qplot(welfare$age)
#나이와 월급의 관계 분석하기
age_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
head(age_income)
ggplot(data = age_income, aes(x = age, y = mean_income)) + geom_line()
#자유주제 직업별 월급차이 + 성별
#직업 변수 검토 및 전처리
class(welfare$code_job)
table(welfare$code_job)
library(readxl)
list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
head(list_job)
dim(list_job)
welfare <- left_join(welfare, list_job, id = "code_job")
welfare %>%
filter(!is.na(code_job)) %>%
select(code_job, job) %>%
head(10)
job_income <- welfare %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income))
head(job_income)
#상위 직업 평균 연봉 + 성별
sex_job_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(job, sex) %>%
summarise(mean_income = mean(income))
top10 <- sex_job_income %>%
arrange(desc(mean_income)) %>%
head(10)
ggplot(data = top10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col(position = "dodge") +
coord_flip()
#하위 직업 평균 연봉 + 성별
bottom10 <- sex_job_income %>%
arrange(mean_income) %>%
head(10)
ggplot(data = bottom10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col(position = "dodge") +
coord_flip()
ggplot(data = bottom10, aes(x = reorder(job, mean_income), y = mean_income, fill = sex)) +
geom_col(position = "dodge") +
coord_flip()
#데이터 준비하기
install.packages("foreign")
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
#데이터 불러오기
raw_welfare <- read.spss(file = "koweps_hpwc14_2019_beta1.sav",
to.data.frame = T)
welfare <- raw_welfare
#데이터 검토하기
head(welfare)
tail(welfare)
View(welfare)
dim(welfare)
str(welfare)
summary(welfare)
#변수명 바꾸기
welfare <- rename(welfare,
sex = h14_g3,
birth = h14_g4,
marriage = h14_g10,
religion = h14_g11,
income = p1402_8aq1,
code_job = h14_eco9,
code_region = h14_reg7)
#성별 변수 검토 및 전처리
class(welfare$sex)
table(welfare$sex)
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex)
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex == 1, "male", "female")
table(welfare$sex)
qplot(welfare$sex)
#월급 변수 검토 및 전처리
class(welfare$income)
summary(welfare$income)
qplot(welfare$income)
qplot(welfare$income) + xlim(0, 1000)
summary(welfare$income)
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
table(is.na(welfare$income))
#성별에 따른 월급 차이 분석하기
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
sex_income
